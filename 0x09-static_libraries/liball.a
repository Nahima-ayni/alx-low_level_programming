!<arch>
0-isdigit.c/    0           0     0     644     275       `
#include "main.h"

/**
 * _isdigit - checks for a digit
 * @c: is c a digit
 * Return: 1 if c is digit
*/

int _isdigit(int c)
{
        if (c >= '0' && c <= '9')
        {
                return (1);
        }

        else
        {
                return (0);
        }
}

0-isupper.c/    0           0     0     644     291       `
#include "main.h"
/**
 * _isupper - check if char is uppercase
 * @c: is the char to be checked
 * Return: 1 (Success)
*/

int _isupper(int c)
{
        if (c >= 'A' && c <= 'Z')
        {
                return (1);
        }

        else
        {
                return (0);
        }
}

0-memset.c/     0           0     0     644     295       `
#include "main.h"

/**
 * _memset - function
 * @s: pointer char
 * @b: constant b
 * @n: unsigned int
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
        {
                s[i] = b;
        }

        return (s);
}

100-atoi.c/     0           0     0     644     987       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int  _atoi(char *s)
{
        int i, d, n, len, f, digit;

        i = 0;
        d = 0;
        n = 0;
        len = 0;
        f = 0;
        digit = 0;

        while (s[len] != '\0')
                len++;

        while (i < len && f == 0)
        {
                if (s[i] == '-')
                        ++d;

                if (s[i] >= '0' && s[i] <= '9')
                {
                        digit = s[i] - '0';
                        if (d % 2)
                                digit = -digit;
                        n = n * 10 + digit;
                        f = 1;
                        if (s[i + 1] < '0' || s[i + 1] > '9')
                                break;
                        f = 0;
                }
                i++;
        }

        if (f == 0)
                return (0);

        return (n);
}

1-memcpy.c/     0           0     0     644     326       `
#include "main.h"

/**
 * _memcpy - copy memory area
 * @dest: destination
 * @src: source
 * @n: no. of elements
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
        {
                dest[i] = src[i];
        }

        return (dest);
}
1-strncat.c/    0           0     0     644     523       `
#include "main.h"

/**
 * _strncat - combine and specify numbers you want
 * @dest: destination
 * @src: source
 * @n: maximum limit of characters
 * Return: dest
*/
char *_strncat(char *dest, char *src, int n)
{
        int h, f;

        f = 0;
        while (dest[f] != '\0')
        {
                f++;
        }

        h = 0;
        while (h < n && src[h] != '\0')
        {
                dest[f] = src[h];
                h++;
                f++;
        }

        dest[f] = '\0';

        return (dest);
}

2-strchr.c/     0           0     0     644     316       `
#include "main.h"

/**
 * _strchr - locates a string character
 * @s: pointer to s
 * @c: char
 * Return: *s
 */
char *_strchr(char *s, char c)
{
        int i;

        for (i = 0; s[i] >= '\0'; i++)
        {
                if (s[i] == c)
                        return (s + i);
        }

        return (0);

}
2-strlen.c/     0           0     0     644     197       `
#include "main.h"
/**
 * _strlen - string
 * @s: _strlen  integer
 * Return: (n);
*/
int _strlen(char *s)
{
        int n;

        for (n = 0; *s != '\0'; n++)
        s++;

        return (n);
}

2-strncpy.c/    0           0     0     644     440       `
#include "main.h"

/**
 * _strncpy - to copy from source to destinaton
 * @dest: destination
 * @src: source
 * @n: integer
 * Return: _strncpy n
 */

char *_strncpy(char *dest, char *src, int n)
{
        int i;

        for (i = 0; i < n && src[i] != '\0'; i++)
        {
                dest[i] = src[i];
        }

        while (i < n)
        {
                dest[i] = '\0';
                i++;
        }

        return (dest);
}
3-islower.c/    0           0     0     644     277       `
#include "main.h"

/**
 * _islower - check if char is lowercase
 * @c: is the char to be checked
 * Return: 1 if char is lowercase, otherwise 0.
 */

int _islower(int c)
{
        if (c >= 'a' && c <= 'z')
                return (1);
        else
                return (0);
}

3-puts.c/       0           0     0     644     219       `
#include "main.h"
/**
 * _puts - Write a function that prints a string
 * @str: integer
 */
void _puts(char *str)
{
        while (*str != '\0')
        {
        _putchar(*str++);
        }

         _putchar('\n');
}

3-strcmp.c/     0           0     0     644     426       `
#include "main.h"
/**
 * _strcmp - comparing two strings
 * @s1: integer
 * @s2: integer
 * y: loop counter
 * Return: flag
 */
int _strcmp(char *s1, char *s2)
{
        int y;

        for (y = 0; s1[y] != '\0' && s2[y] != '\0'; y++)
        {
                if (s1[y] != s2[y])
                {
                        return (s1[y] - s2[y]);
                        y++;
                }
        }
        return (0);
}
3-strspn.c/     0           0     0     644     715       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix string
 * @s: pointer s
 * @accept: pointer
 * Return: s
 */
unsigned int _strspn(char *s, char *accept)
{
        unsigned int count = 0;
        int i, j;

        for (i = 0; s[i] != '\0'; i++)
        {
                for (j = 0; accept[j] != '\0'; j++)
                {
                        if (s[i] == accept[j])
                        {
                                count++;
                                break;
                        }
        }

                        if (accept[j] == '\0')
                        {
                        break;
                        }
                }

                return (count);

}

4-isalpha.c/    0           0     0     644     242       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
        return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     521       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: pointer
 * @accept: pointer
 * Return: n
 */
char *_strpbrk(char *s, char *accept)
{
        unsigned int i, j;

        for (i = 0; s[i] != '\0'; i++)
        {
                for (j = 0; accept[j] != '\0'; j++)
                {
                        if (s[i] == accept[j])
                        {
                                return (s + i);
                        }
                }
        }

        return ('\0');
}

5-strstr.c/     0           0     0     644     773       `
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: find within the haystack
 * @needle: search in char
 * Return: haystack
 */
char *_strstr(char *haystack, char *needle)
{
        int i, j;

        for (i = 0; haystack[i] != '\0'; i++)
        {
                int match = 1;

                for (j = 0; needle[j] != '\0'; j++)
                {
                        if (haystack[i + j] != needle[j])
                        {
                                match = 0;
                                break;
                        }
                }
                        if (match)
                        {
                                return (haystack + i);
                        }

        }
                        return ('\0');
}

6-abs.c/        0           0     0     644     249       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
        if (n >= 0)
        {
                return (n);
        }
        return (-n);
}

9-strcpy.c/     0           0     0     644     439       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
        int l = 0;
        int x = 0;

        while (*(src + l) != '\0')
        {
                l++;
        }
        for ( ; x < l ; x++)
        {
                dest[x] = src[x];
        }
        dest[l] = '\0';
        return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

